package main

import "fmt"

func SliceNest() {

	v1 := []int{11, 22, 33, 44, 55, 66, 77}
	v2 := [][]int{{11, 22, 33}, {44, 55, 66}}

	v3 := [][2]int{{1, 2}, {4, 5}}

	fmt.Println(v1, v2, v3)

	v1[0] = 1111
	v2[0][2] = 2222
	v3[1][0] = 9999

	fmt.Println(v1, v2, v3)

	// 变量赋值 -------------------------------------------
	// 整型
	v4 := 1
	v5 := v4 // 重新创建一个 1 存到新的内存

	fmt.Printf("v4的内存地址：%p\n", &v4) //0x14000124168
	fmt.Printf("v5的内存地址：%p\n", &v5) //0x14000124170

	// bool
	v6 := false
	v7 := v6

	fmt.Printf("v6的内存地址：%p\n", &v6) //0x14000124178
	fmt.Printf("v7的内存地址：%p\n", &v7) //0x14000124179

	// 浮点型
	v8 := 3.1456
	v9 := v8

	fmt.Printf("v8的内存地址：%p\n", &v8) //0x14000124180
	fmt.Printf("v9的内存地址：%p\n", &v9) //0x14000124188

	// 字符串

	v10 := "叶安适"
	v11 := v10

	/*
		                 len = 9
				v10 =>   ptr = 0x00020303    \
			                                         ->   "叶安适" (数据的内存地址0x00020303)
		                 len = 9                   /
				v11 =>   ptr = 0x00020303
	*/

	fmt.Printf("v10的内存地址：%p\n", &v10) //0x1400008e330
	fmt.Printf("v11的内存地址：%p\n", &v11) //0x1400008e340

	// 数组 (都会拷贝一份)
	v12 := [2]int{6, 9}
	v13 := v12

	fmt.Printf("v12的内存地址：%p\n", &v12) //0x14000124190
	fmt.Printf("v13的内存地址：%p\n", &v13) //0x140001241a0

	// 切片
	/*

		                    cap  len
				v14 =>   array = 0x00020303    \
			                                    ->    | 6 | 9 |  | (内存地址0x00020303)
							cap  len          /
				v15 =>   array = 0x00020303
	*/

	v14 := []int{6, 9}
	v15 := v14

	v14[1] = 111111
	fmt.Println(v14, v15)

	fmt.Printf("v14的内存地址：%p\n", &v14) //0x1400011a108
	fmt.Printf("v15的内存地址：%p\n", &v15) //0x1400011a120

	// 如果扩容，那么内部存储数据的数组就会重新开辟区域
	v14 = append(v14, 999)
	fmt.Println(v14, v15)

}
